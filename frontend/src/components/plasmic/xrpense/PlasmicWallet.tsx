// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: akcNnSFg9qYk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Layout from "../../Layout"; // plasmic-import: 8kcWfTTW5pIG/component
import KvItem from "../../KvItem"; // plasmic-import: Haxw2MIMlmpq/component
import DecoratedSection from "../../DecoratedSection"; // plasmic-import: TLGCmAakJkGm/component
import IconButton from "../../IconButton"; // plasmic-import: c6xa4h_PpvrO/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicWallet.module.css"; // plasmic-import: akcNnSFg9qYk/css

import PlusLargeSvgrepoComsvgIcon from "./icons/PlasmicIcon__PlusLargeSvgrepoComsvg"; // plasmic-import: YEPes6dYRRew/icon
import CompleteIcon from "./icons/PlasmicIcon__Complete"; // plasmic-import: pTJFuCWk8NGr/icon
import CopySvgrepoComsvgIcon from "./icons/PlasmicIcon__CopySvgrepoComsvg"; // plasmic-import: GHJGyw-ZCuIE/icon

createPlasmicElementProxy;

export type PlasmicWallet__VariantMembers = {};
export type PlasmicWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicWallet__VariantsArgs;
export const PlasmicWallet__VariantProps = new Array<VariantPropType>();

export type PlasmicWallet__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWallet__ArgsType;
export const PlasmicWallet__ArgProps = new Array<ArgPropType>(
  "children",
  "children2"
);

export type PlasmicWallet__OverridesType = {
  root?: p.Flex<"div">;
  layout?: p.Flex<typeof Layout>;
  kvItem?: p.Flex<typeof KvItem>;
  decoratedSection?: p.Flex<typeof DecoratedSection>;
  iconButton?: p.Flex<typeof IconButton>;
  copy?: p.Flex<typeof IconButton>;
};

export interface DefaultWalletProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWallet__RenderFunc(props: {
  variants: PlasmicWallet__VariantsArgs;
  args: PlasmicWallet__ArgsType;
  overrides: PlasmicWallet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
            title={"Wallet\u60c5\u5831\u78ba\u8a8d"}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <KvItem
                    data-plasmic-name={"kvItem"}
                    data-plasmic-override={overrides.kvItem}
                    className={classNames("__wab_instance", sty.kvItem)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dnhQh
                        )}
                      >
                        {"\u6b8b\u9ad8"}
                      </div>
                    }
                    noCopy={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4VMfk
                      )}
                    >
                      {"\u7d04XXX\u5186"}
                    </div>
                  </KvItem>
                  <DecoratedSection
                    data-plasmic-name={"decoratedSection"}
                    data-plasmic-override={overrides.decoratedSection}
                    actions={
                      <IconButton
                        data-plasmic-name={"iconButton"}
                        data-plasmic-override={overrides.iconButton}
                        className={classNames("__wab_instance", sty.iconButton)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___74Mfk
                          )}
                        >
                          {
                            "\u30b3\u30a4\u30f3\u306e\u8ffd\u52a0\u306f\u3053\u3053\u304b\u3089"
                          }
                        </div>
                        <PlusLargeSvgrepoComsvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___99Ngz
                          )}
                          role={"img"}
                        />
                      </IconButton>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.decoratedSection
                    )}
                    title={"\u30b3\u30a4\u30f3\u306e\u7ba1\u7406"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cwmck)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5O9O
                        )}
                      >
                        <CompleteIcon
                          className={classNames(projectcss.all, sty.svg__ga5Fa)}
                          role={"img"}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oQWt
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ksEeb
                                )}
                              >
                                {
                                  "\u30b3\u30a4\u30f3\u540d\u304c\u5165\u308a\u307e\u3059"
                                }
                              </div>
                            ),
                            value: args.children
                          })}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bBeJ
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ugfJp
                                  )}
                                >
                                  {
                                    "\u30a2\u30c9\u30ec\u30b9\u304c\u5165\u308a\u307e\u3059"
                                  }
                                </div>
                              ),
                              value: args.children2
                            })}
                            <IconButton
                              data-plasmic-name={"copy"}
                              data-plasmic-override={overrides.copy}
                              className={classNames("__wab_instance", sty.copy)}
                            >
                              <CopySvgrepoComsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__wfpKm
                                )}
                                role={"img"}
                              />
                            </IconButton>
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  </DecoratedSection>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "layout", "kvItem", "decoratedSection", "iconButton", "copy"],
  layout: ["layout", "kvItem", "decoratedSection", "iconButton", "copy"],
  kvItem: ["kvItem"],
  decoratedSection: ["decoratedSection", "iconButton", "copy"],
  iconButton: ["iconButton"],
  copy: ["copy"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  kvItem: typeof KvItem;
  decoratedSection: typeof DecoratedSection;
  iconButton: typeof IconButton;
  copy: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWallet__VariantsArgs;
    args?: PlasmicWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWallet__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWallet__ArgProps,
          internalVariantPropNames: PlasmicWallet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWallet";
  } else {
    func.displayName = `PlasmicWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicWallet = Object.assign(
  // Top-level PlasmicWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    kvItem: makeNodeComponent("kvItem"),
    decoratedSection: makeNodeComponent("decoratedSection"),
    iconButton: makeNodeComponent("iconButton"),
    copy: makeNodeComponent("copy"),

    // Metadata about props expected for PlasmicWallet
    internalVariantProps: PlasmicWallet__VariantProps,
    internalArgProps: PlasmicWallet__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWallet;
/* prettier-ignore-end */
