// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: OEL1yjy8fNWN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Layout from "../../Layout"; // plasmic-import: 8kcWfTTW5pIG/component
import KvItem from "../../KvItem"; // plasmic-import: Haxw2MIMlmpq/component
import DecoratedSection from "../../DecoratedSection"; // plasmic-import: TLGCmAakJkGm/component
import DefaultButton from "../../DefaultButton"; // plasmic-import: IXlVEWy595ii/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicInboxDetail.module.css"; // plasmic-import: OEL1yjy8fNWN/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: UPP2br5JFIoC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tOAoYivXP3sa/icon

createPlasmicElementProxy;

export type PlasmicInboxDetail__VariantMembers = {};
export type PlasmicInboxDetail__VariantsArgs = {};
type VariantPropType = keyof PlasmicInboxDetail__VariantsArgs;
export const PlasmicInboxDetail__VariantProps = new Array<VariantPropType>();

export type PlasmicInboxDetail__ArgsType = {};
type ArgPropType = keyof PlasmicInboxDetail__ArgsType;
export const PlasmicInboxDetail__ArgProps = new Array<ArgPropType>();

export type PlasmicInboxDetail__OverridesType = {
  root?: p.Flex<"div">;
  layout?: p.Flex<typeof Layout>;
  kvItem?: p.Flex<typeof KvItem>;
  decoratedSection?: p.Flex<typeof DecoratedSection>;
  text?: p.Flex<"div">;
};

export interface DefaultInboxDetailProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInboxDetail__RenderFunc(props: {
  variants: PlasmicInboxDetail__VariantsArgs;
  args: PlasmicInboxDetail__ArgsType;
  overrides: PlasmicInboxDetail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "AtiexzeE27KKVJrwX6s5c",
        opId: "64c3d064-dbe5-42f8-aaae-0820cdc8997f",
        userArgs: {
          variables: [$ctx.params.messageId]
        },
        cacheKey: `plasmic.$.64c3d064-dbe5-42f8-aaae-0820cdc8997f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
            title={"\u5c4a\u3044\u305f\u30e1\u30c3\u30bb\u30fc\u30b8"}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__ucYdN)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          [
                            "タイトル",
                            $queries.query.data.response.data.inbox_by_pk.title
                          ],
                          [
                            "受信時刻",
                            new Date(
                              $queries.query.data.response.data.inbox_by_pk.updated_at
                            ).toLocaleString()
                          ]
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <KvItem
                        data-plasmic-name={"kvItem"}
                        data-plasmic-override={overrides.kvItem}
                        className={classNames("__wab_instance", sty.kvItem)}
                        key={currentIndex}
                        label={
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u30bf\u30a4\u30c8\u30eb";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        }
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem[1];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u7d4c\u8cbb\u7533\u8acb\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </KvItem>
                    );
                  })}
                  <DecoratedSection
                    data-plasmic-name={"decoratedSection"}
                    data-plasmic-override={overrides.decoratedSection}
                    actions={null}
                    className={classNames(
                      "__wab_instance",
                      sty.decoratedSection
                    )}
                    noAction={true}
                    title={"\u30e1\u30c3\u30bb\u30fc\u30b8\u5185\u5bb9"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wRIi0)}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data.response.data
                                .inbox_by_pk.children;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u3053\u3053\u306b\u30b3\u30e1\u30f3\u30c8\u304c\u5165\u308a\u307e\u3059\u3002";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </DecoratedSection>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zfwQw)}
                  >
                    <DefaultButton
                      className={classNames(
                        "__wab_instance",
                        sty.defaultButton__fq1Ie
                      )}
                      color={"accent"}
                      link={`/inbox`}
                    >
                      {"\u304a\u77e5\u3089\u305b\u4e00\u89a7\u306b\u623b\u308b"}
                    </DefaultButton>
                    <DefaultButton
                      className={classNames(
                        "__wab_instance",
                        sty.defaultButton__w3131
                      )}
                      color={"primaryLt"}
                      link={`/`}
                    >
                      {"\u30db\u30fc\u30e0\u306b\u623b\u308b"}
                    </DefaultButton>
                  </p.Stack>
                </div>
              )}
            </ph.DataCtxReader>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "layout", "kvItem", "decoratedSection", "text"],
  layout: ["layout", "kvItem", "decoratedSection", "text"],
  kvItem: ["kvItem"],
  decoratedSection: ["decoratedSection", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  kvItem: typeof KvItem;
  decoratedSection: typeof DecoratedSection;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInboxDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInboxDetail__VariantsArgs;
    args?: PlasmicInboxDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInboxDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInboxDetail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInboxDetail__ArgProps,
          internalVariantPropNames: PlasmicInboxDetail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInboxDetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInboxDetail";
  } else {
    func.displayName = `PlasmicInboxDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicInboxDetail = Object.assign(
  // Top-level PlasmicInboxDetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    kvItem: makeNodeComponent("kvItem"),
    decoratedSection: makeNodeComponent("decoratedSection"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicInboxDetail
    internalVariantProps: PlasmicInboxDetail__VariantProps,
    internalArgProps: PlasmicInboxDetail__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInboxDetail;
/* prettier-ignore-end */
