// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: 8tltFS8I7FwM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: IXlVEWy595ii/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicSignIn.module.css"; // plasmic-import: 8tltFS8I7FwM/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: UPP2br5JFIoC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tOAoYivXP3sa/icon

createPlasmicElementProxy;

export type PlasmicSignIn__VariantMembers = {
  error: "error";
  loading: "loading";
};
export type PlasmicSignIn__VariantsArgs = {
  error?: SingleBooleanChoiceArg<"error">;
  loading?: SingleBooleanChoiceArg<"loading">;
};
type VariantPropType = keyof PlasmicSignIn__VariantsArgs;
export const PlasmicSignIn__VariantProps = new Array<VariantPropType>(
  "error",
  "loading"
);

export type PlasmicSignIn__ArgsType = {
  msg?: React.ReactNode;
  onLogin?: (event: any) => void;
};
type ArgPropType = keyof PlasmicSignIn__ArgsType;
export const PlasmicSignIn__ArgProps = new Array<ArgPropType>("msg", "onLogin");

export type PlasmicSignIn__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSignInProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignIn__RenderFunc(props: {
  variants: PlasmicSignIn__VariantsArgs;
  args: PlasmicSignIn__ArgsType;
  overrides: PlasmicSignIn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "error",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.error
      },
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rooterror]: hasVariant($state, "error", "error"),
              [sty.rootloading]: hasVariant($state, "loading", "loading")
            }
          )}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___7SdM5, {
              [sty.freeBoxerror___7SdM5L8US3]: hasVariant(
                $state,
                "error",
                "error"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "\u7533\u3057\u8a33\u3054\u3056\u3044\u307e\u305b\u3093\u3002\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u3082\u3046\u4e00\u5ea6\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\u3002",
              value: args.msg
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lHc69, {
              [sty.freeBoxerror__lHc69L8US3]: hasVariant(
                $state,
                "error",
                "error"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__h5OKv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bCKeh
                )}
              >
                {"Xrpense"}
              </div>
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__iaVXm, {
                [sty.buttonerror__iaVXml8US3]: hasVariant(
                  $state,
                  "error",
                  "error"
                ),
                [sty.buttonloading__iaVXmJwuHy]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                )
              })}
              color={"primaryLt"}
              isDisabled={
                hasVariant($state, "loading", "loading") ? true : undefined
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $props.onLogin("xid");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vmoT3
                )}
              >
                {
                  "XRPL\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30ed\u30b0\u30a4\u30f3"
                }
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__rHmo6, {
                [sty.buttonerror__rHmo6L8US3]: hasVariant(
                  $state,
                  "error",
                  "error"
                ),
                [sty.buttonloading__rHmo6JwuHy]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                )
              })}
              color={"link"}
              isDisabled={
                hasVariant($state, "loading", "loading") ? true : undefined
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $props.onLogin("entraid");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__swEbL
                )}
              >
                {"Microsoft Entra ID\u3067\u30b5\u30a4\u30f3\u30a4\u30f3"}
              </div>
            </Button>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qVOqA
              )}
            >
              {
                "\u30b5\u30a4\u30f3\u30a4\u30f3\u3059\u308b\u3068\u5229\u7528\u898f\u7d04\u306b\u540c\u610f\u3057\u305f\u3082\u306e\u3068\u307f\u306a\u3057\u307e\u3059\u3002"
              }
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignIn__VariantsArgs;
    args?: PlasmicSignIn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignIn__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignIn__ArgProps,
          internalVariantPropNames: PlasmicSignIn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignIn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignIn";
  } else {
    func.displayName = `PlasmicSignIn.${nodeName}`;
  }
  return func;
}

export const PlasmicSignIn = Object.assign(
  // Top-level PlasmicSignIn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSignIn
    internalVariantProps: PlasmicSignIn__VariantProps,
    internalArgProps: PlasmicSignIn__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignIn;
/* prettier-ignore-end */
