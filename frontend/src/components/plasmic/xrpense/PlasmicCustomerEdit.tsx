// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: kFEg42b5zE4G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Layout from "../../Layout"; // plasmic-import: 8kcWfTTW5pIG/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import DefaultButton from "../../DefaultButton"; // plasmic-import: IXlVEWy595ii/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicCustomerEdit.module.css"; // plasmic-import: kFEg42b5zE4G/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: UPP2br5JFIoC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tOAoYivXP3sa/icon

createPlasmicElementProxy;

export type PlasmicCustomerEdit__VariantMembers = {};
export type PlasmicCustomerEdit__VariantsArgs = {};
type VariantPropType = keyof PlasmicCustomerEdit__VariantsArgs;
export const PlasmicCustomerEdit__VariantProps = new Array<VariantPropType>();

export type PlasmicCustomerEdit__ArgsType = {};
type ArgPropType = keyof PlasmicCustomerEdit__ArgsType;
export const PlasmicCustomerEdit__ArgProps = new Array<ArgPropType>();

export type PlasmicCustomerEdit__OverridesType = {
  root?: p.Flex<"div">;
  layout?: p.Flex<typeof Layout>;
  form?: p.Flex<typeof FormWrapper>;
  freeBox?: p.Flex<"div">;
  input?: p.Flex<typeof AntdInput>;
  numberInput?: p.Flex<typeof AntdInputNumber>;
};

export interface DefaultCustomerEditProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCustomerEdit__RenderFunc(props: {
  variants: PlasmicCustomerEdit__VariantsArgs;
  args: PlasmicCustomerEdit__ArgsType;
  overrides: PlasmicCustomerEdit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    customerInfoEx: usePlasmicDataOp(() => {
      return {
        sourceId: "AtiexzeE27KKVJrwX6s5c",
        opId: "61615784-2ecf-42d9-b8f0-b837b6e06def",
        userArgs: {},
        cacheKey: `plasmic.$.61615784-2ecf-42d9-b8f0-b837b6e06def.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout)}
            title={"\u7d4c\u8cbb\u632f\u8fbc\u5148\u5909\u66f4"}
          >
            <ph.DataCtxReader>
              {$ctx =>
                (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: (() => {
                      const __composite = [
                        { label: "Name", name: null, inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ];
                      __composite["0"]["name"] = "name";
                      return __composite;
                    })(),
                    initialValues: (() => {
                      try {
                        return {
                          redeemAddress:
                            $queries.customerInfoEx.data.response.data
                              .user_by_pk.redeem_address,
                          redeemTag:
                            $queries.customerInfoEx.data.response.data
                              .user_by_pk.redeem_tag
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["useIntegration"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "AtiexzeE27KKVJrwX6s5c",
                                opId: "f3a165f1-d5a1-4f34-bae8-f986a39392c7",
                                userArgs: {
                                  variables: [
                                    $state.form.value.redeemAddress,
                                    $state.form.value.redeemTag
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["useIntegration"] != null &&
                        typeof $steps["useIntegration"] === "object" &&
                        typeof $steps["useIntegration"].then === "function"
                      ) {
                        $steps["useIntegration"] = await $steps[
                          "useIntegration"
                        ];
                      }

                      $steps["goToCustomer"] = true
                        ? (() => {
                            const actionArgs = { destination: `/customer` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToCustomer"] != null &&
                        typeof $steps["goToCustomer"] === "object" &&
                        typeof $steps["goToCustomer"].then === "function"
                      ) {
                        $steps["goToCustomer"] = await $steps["goToCustomer"];
                      }
                    },
                    onIsSubmittingChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"freeBox"}
                        data-plasmic-override={overrides.freeBox}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__trmde
                          )}
                          label={"\u632f\u8fbc\u5148\u30a2\u30c9\u30ec\u30b9"}
                          name={"redeemAddress"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <DefaultButton
                          className={classNames(
                            "__wab_instance",
                            sty.defaultButton___2WDo9
                          )}
                          color={"primaryLt"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnForm"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "form",
                                    action: "setFieldValue",
                                    args: [
                                      ["redeemAddress"],
                                      (() => {
                                        try {
                                          if (window.currentAddr) {
                                            return window.currentAddr;
                                          } else {
                                            return "";
                                          }
                                        } catch (error) {
                                          return "";
                                        }
                                      })()
                                    ]
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnForm"] != null &&
                              typeof $steps["runActionOnForm"] === "object" &&
                              typeof $steps["runActionOnForm"].then ===
                                "function"
                            ) {
                              $steps["runActionOnForm"] = await $steps[
                                "runActionOnForm"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yVsfB
                            )}
                          >
                            {
                              "XRPL\u30a2\u30ab\u30a6\u30f3\u30c8\u304b\u3089\u53d6\u5f97"
                            }
                          </div>
                        </DefaultButton>
                      </p.Stack>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__rzcu7
                        )}
                        label={"\u5b9b\u5148\u30bf\u30b0"}
                        name={"redeemTag"}
                      >
                        <AntdInputNumber
                          data-plasmic-name={"numberInput"}
                          data-plasmic-override={overrides.numberInput}
                          className={classNames(
                            "__wab_instance",
                            sty.numberInput
                          )}
                          onChange={p.generateStateOnChangeProp($state, [
                            "numberInput",
                            "value"
                          ])}
                          type={"number"}
                          value={p.generateStateValueProp($state, [
                            "numberInput",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <DefaultButton
                        className={classNames(
                          "__wab_instance",
                          sty.defaultButton__dkQxE
                        )}
                        color={"negative"}
                        showEndIcon={true}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ffMv6
                          )}
                        >
                          {"\u53cd\u6620\u3055\u305b\u308b"}
                        </div>
                      </DefaultButton>
                    </FormWrapper>
                  );
                })()
              }
            </ph.DataCtxReader>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "layout", "form", "freeBox", "input", "numberInput"],
  layout: ["layout", "form", "freeBox", "input", "numberInput"],
  form: ["form", "freeBox", "input", "numberInput"],
  freeBox: ["freeBox", "input"],
  input: ["input"],
  numberInput: ["numberInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  form: typeof FormWrapper;
  freeBox: "div";
  input: typeof AntdInput;
  numberInput: typeof AntdInputNumber;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCustomerEdit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCustomerEdit__VariantsArgs;
    args?: PlasmicCustomerEdit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCustomerEdit__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCustomerEdit__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCustomerEdit__ArgProps,
          internalVariantPropNames: PlasmicCustomerEdit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCustomerEdit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCustomerEdit";
  } else {
    func.displayName = `PlasmicCustomerEdit.${nodeName}`;
  }
  return func;
}

export const PlasmicCustomerEdit = Object.assign(
  // Top-level PlasmicCustomerEdit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    form: makeNodeComponent("form"),
    freeBox: makeNodeComponent("freeBox"),
    input: makeNodeComponent("input"),
    numberInput: makeNodeComponent("numberInput"),

    // Metadata about props expected for PlasmicCustomerEdit
    internalVariantProps: PlasmicCustomerEdit__VariantProps,
    internalArgProps: PlasmicCustomerEdit__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCustomerEdit;
/* prettier-ignore-end */
