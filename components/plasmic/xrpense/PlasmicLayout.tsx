// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: 8kcWfTTW5pIG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LayoutBase from "../../LayoutBase"; // plasmic-import: xHlJ0wygH-6y/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";

import { UserTypeValue, useUserType } from "./PlasmicGlobalVariant__UserType"; // plasmic-import: 4ybx8vV_5sw-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicLayout.module.css"; // plasmic-import: 8kcWfTTW5pIG/css

import ThreedotsSvgrepoComsvgIcon from "./icons/PlasmicIcon__ThreedotsSvgrepoComsvg"; // plasmic-import: wN9HcmYrq_HW/icon

createPlasmicElementProxy;

export type PlasmicLayout__VariantMembers = {};
export type PlasmicLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayout__VariantsArgs;
export const PlasmicLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicLayout__ArgsType = {
  children?: React.ReactNode;
  title?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLayout__ArgsType;
export const PlasmicLayout__ArgProps = new Array<ArgPropType>(
  "children",
  "title"
);

export type PlasmicLayout__OverridesType = {
  root?: p.Flex<typeof LayoutBase>;
  loadingBoundary?: p.Flex<typeof LoadingBoundary>;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
};

export interface DefaultLayoutProps {
  children?: React.ReactNode;
  title?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayout__RenderFunc(props: {
  variants: PlasmicLayout__VariantsArgs;
  args: PlasmicLayout__ArgsType;
  overrides: PlasmicLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    userType: useUserType()
  });

  return (
    <LayoutBase
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.rootglobal_userType_anonymous]: hasVariant(
          globalVariants,
          "userType",
          "anonymous"
        ),
        [sty.rootglobal_userType_user]: hasVariant(
          globalVariants,
          "userType",
          "user"
        )
      })}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__cij3C, {
          [sty.freeBoxglobal_userType_user__cij3CvoWen]: hasVariant(
            globalVariants,
            "userType",
            "user"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__hNoM)}>
          <div className={classNames(projectcss.all, sty.freeBox__ky7N1)}>
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.title,
              className: classNames(sty.slotTargetTitle)
            })}
          </div>
          <LoadingBoundary
            data-plasmic-name={"loadingBoundary"}
            data-plasmic-override={overrides.loadingBoundary}
            className={classNames("__wab_instance", sty.loadingBoundary)}
            loadingState={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jm6Pl)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__atYiy)}
                    >
                      <ThreedotsSvgrepoComsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"\u8aad\u307f\u8fbc\u307f\u4e2d"}
                      </div>
                    </div>
                  </div>
                )}
              </ph.DataCtxReader>
            }
          >
            <ph.DataCtxReader>
              {$ctx =>
                p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.children
                })
              }
            </ph.DataCtxReader>
          </LoadingBoundary>
          <div className={classNames(projectcss.all, sty.freeBox__zcTn1)} />
        </div>
      </div>
    </LayoutBase>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "loadingBoundary", "svg", "text"],
  loadingBoundary: ["loadingBoundary", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LayoutBase;
  loadingBoundary: typeof LoadingBoundary;
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayout__VariantsArgs;
    args?: PlasmicLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayout__ArgProps,
          internalVariantPropNames: PlasmicLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
