// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: xHlJ0wygH-6y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";

import { UserTypeValue, useUserType } from "./PlasmicGlobalVariant__UserType"; // plasmic-import: 4ybx8vV_5sw-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicLayoutBase.module.css"; // plasmic-import: xHlJ0wygH-6y/css

createPlasmicElementProxy;

export type PlasmicLayoutBase__VariantMembers = {};
export type PlasmicLayoutBase__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayoutBase__VariantsArgs;
export const PlasmicLayoutBase__VariantProps = new Array<VariantPropType>();

export type PlasmicLayoutBase__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLayoutBase__ArgsType;
export const PlasmicLayoutBase__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLayoutBase__OverridesType = {
  root?: p.Flex<typeof RichLayout>;
};

export interface DefaultLayoutBaseProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayoutBase__RenderFunc(props: {
  variants: PlasmicLayoutBase__VariantsArgs;
  args: PlasmicLayoutBase__ArgsType;
  overrides: PlasmicLayoutBase__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    userType: useUserType()
  });

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      actionsChildren={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__m7Xe
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  try {
                    return "アドレス: " + (currentAddr || "未接続");
                  } catch (e) {
                    return "未接続";
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u30a2\u30c9\u30ec\u30b9: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_userType_anonymous]: hasVariant(
            globalVariants,
            "userType",
            "anonymous"
          ),
          [sty.rootglobal_userType_user]: hasVariant(
            globalVariants,
            "userType",
            "user"
          )
        }
      )}
      fixSiderbar={true}
      layout={"side"}
      logoElement={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__h6GjF
          )}
        >
          {"X"}
        </div>
      }
      menu={(() => {
        const __composite = {
          defaultOpenAll: null,
          hideMenuWhenCollapsed: null
        };
        __composite["defaultOpenAll"] = false;
        __composite["hideMenuWhenCollapsed"] = true;
        return __composite;
      })()}
      navMenuItems={
        hasVariant(globalVariants, "userType", "anonymous")
          ? (() => {
              const __composite = [
                { path: "/", name: null },
                { path: null, name: null }
              ];
              __composite["0"]["name"] = "\u30db\u30fc\u30e0";
              __composite["1"]["path"] = `/signin`;
              __composite["1"]["name"] = "\u30b5\u30a4\u30f3\u30a4\u30f3";
              return __composite;
            })()
          : (() => {
              const __composite = [
                { path: "/", name: null },
                { name: null, path: null },
                { name: null, path: null },
                { name: null, path: null },
                { path: null, name: null },
                { name: null, path: null }
              ];
              __composite["0"]["name"] = "\u30db\u30fc\u30e0";
              __composite["1"]["name"] = "\u7d4c\u8cbb\u7533\u8acb";
              __composite["1"]["path"] = `/create`;
              __composite["2"]["name"] = "\u7533\u8acb\u5c65\u6b74";
              __composite["2"]["path"] = `/history`;
              __composite["3"]["name"] = "\u304a\u5ba2\u69d8\u60c5\u5831";
              __composite["3"]["path"] = `/customer`;
              __composite["4"]["path"] = `/wallet`;
              __composite["4"]["name"] = "\u30a6\u30a9\u30ec\u30c3\u30c8";
              __composite["5"]["name"] = "\u30b5\u30a4\u30f3\u30a2\u30a6\u30c8";
              __composite["5"]["path"] = `/signout`;
              return __composite;
            })()
      }
      simpleNavTheme={(() => {
        const __composite = { scheme: null, customBgColor: null };
        __composite["scheme"] = "custom";
        __composite["customBgColor"] = "var(--token-vHx4PCz0RMbW)";
        return __composite;
      })()}
      title={"Xrpense"}
    >
      <div className={classNames(projectcss.all, sty.freeBox___9SzLe)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__fw0H, {
            [sty.freeBoxglobal_userType_anonymous__fw0HYeBsZ]: hasVariant(
              globalVariants,
              "userType",
              "anonymous"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </div>
      </div>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayoutBase__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayoutBase__VariantsArgs;
    args?: PlasmicLayoutBase__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayoutBase__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayoutBase__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayoutBase__ArgProps,
          internalVariantPropNames: PlasmicLayoutBase__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayoutBase__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayoutBase";
  } else {
    func.displayName = `PlasmicLayoutBase.${nodeName}`;
  }
  return func;
}

export const PlasmicLayoutBase = Object.assign(
  // Top-level PlasmicLayoutBase renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicLayoutBase
    internalVariantProps: PlasmicLayoutBase__VariantProps,
    internalArgProps: PlasmicLayoutBase__ArgProps
  }
);

export default PlasmicLayoutBase;
/* prettier-ignore-end */
