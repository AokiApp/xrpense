// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: YtjsYqjs90m-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LayoutBase from "../../LayoutBase"; // plasmic-import: xHlJ0wygH-6y/component
import CreateStep from "../../CreateStep"; // plasmic-import: 0Id__lT8w_bK/component
import DefaultButton from "../../DefaultButton"; // plasmic-import: IXlVEWy595ii/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import Copilot from "../../Copilot"; // plasmic-import: 3QoQepU800a-/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import KvItem from "../../KvItem"; // plasmic-import: Haxw2MIMlmpq/component

import { useScreenVariants as useScreenVariantsvAp4RmrZq8S } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vAp4rmrZq-8s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicCreateDetail.module.css"; // plasmic-import: YtjsYqjs90m-/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: UPP2br5JFIoC/icon
import LeftSvgrepoComsvgIcon from "./icons/PlasmicIcon__LeftSvgrepoComsvg"; // plasmic-import: 9_fsow2AKzIj/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tOAoYivXP3sa/icon

createPlasmicElementProxy;

export type PlasmicCreateDetail__VariantMembers = {
  type: "travel" | "convention" | "consumable";
  confirming: "confirming";
};
export type PlasmicCreateDetail__VariantsArgs = {
  type?: SingleChoiceArg<"travel" | "convention" | "consumable">;
  confirming?: SingleBooleanChoiceArg<"confirming">;
};
type VariantPropType = keyof PlasmicCreateDetail__VariantsArgs;
export const PlasmicCreateDetail__VariantProps = new Array<VariantPropType>(
  "type",
  "confirming"
);

export type PlasmicCreateDetail__ArgsType = {};
type ArgPropType = keyof PlasmicCreateDetail__ArgsType;
export const PlasmicCreateDetail__ArgProps = new Array<ArgPropType>();

export type PlasmicCreateDetail__OverridesType = {
  root?: p.Flex<"div">;
  layoutBase?: p.Flex<typeof LayoutBase>;
  createStep?: p.Flex<typeof CreateStep>;
  section?: p.Flex<"section">;
  svg?: p.Flex<"svg">;
  form?: p.Flex<typeof FormWrapper>;
  titleInput?: p.Flex<typeof AntdInput>;
  dateInput?: p.Flex<typeof AntdInput>;
  nameInput?: p.Flex<typeof AntdInput>;
  numInput?: p.Flex<typeof AntdInput>;
  amountInput?: p.Flex<typeof AntdInput>;
  taxInput?: p.Flex<typeof AntdSelect>;
  descriptionInput?: p.Flex<typeof Quill>;
  copilot?: p.Flex<typeof Copilot>;
  attachments?: p.Flex<typeof UploadWrapper>;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultCreateDetailProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCreateDetail__RenderFunc(props: {
  variants: PlasmicCreateDetail__VariantsArgs;
  args: PlasmicCreateDetail__ArgsType;
  overrides: PlasmicCreateDetail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.type
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "titleInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "amountInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "attachments.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "descriptionInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "dateInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "taxInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confirming",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.confirming
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvAp4RmrZq8S()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootconfirming]: hasVariant(
                $state,
                "confirming",
                "confirming"
              ),
              [sty.roottype_consumable]: hasVariant(
                $state,
                "type",
                "consumable"
              ),
              [sty.roottype_convention]: hasVariant(
                $state,
                "type",
                "convention"
              ),
              [sty.roottype_travel]: hasVariant($state, "type", "travel")
            }
          )}
        >
          <LayoutBase
            data-plasmic-name={"layoutBase"}
            data-plasmic-override={overrides.layoutBase}
            className={classNames("__wab_instance", sty.layoutBase, {
              [sty.layoutBaseconfirming]: hasVariant(
                $state,
                "confirming",
                "confirming"
              ),
              [sty.layoutBasetype_consumable]: hasVariant(
                $state,
                "type",
                "consumable"
              ),
              [sty.layoutBasetype_travel]: hasVariant($state, "type", "travel")
            })}
          >
            <CreateStep
              data-plasmic-name={"createStep"}
              data-plasmic-override={overrides.createStep}
              className={classNames("__wab_instance", sty.createStep, {
                [sty.createStepconfirming]: hasVariant(
                  $state,
                  "confirming",
                  "confirming"
                )
              })}
              currentStep={
                hasVariant($state, "confirming", "confirming") ? 3 : 2
              }
            />

            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section, {
                [sty.sectionconfirming]: hasVariant(
                  $state,
                  "confirming",
                  "confirming"
                ),
                [sty.sectiontype_consumable]: hasVariant(
                  $state,
                  "type",
                  "consumable"
                ),
                [sty.sectiontype_convention]: hasVariant(
                  $state,
                  "type",
                  "convention"
                ),
                [sty.sectiontype_travel]: hasVariant($state, "type", "travel")
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pZ4C9,
                  {
                    [sty.texttype_consumable__pZ4C99EEix]: hasVariant(
                      $state,
                      "type",
                      "consumable"
                    ),
                    [sty.texttype_convention__pZ4C9UmVmc]: hasVariant(
                      $state,
                      "type",
                      "convention"
                    ),
                    [sty.texttype_travel__pZ4C9QzfCl]: hasVariant(
                      $state,
                      "type",
                      "travel"
                    )
                  }
                )}
              >
                {hasVariant($state, "type", "consumable")
                  ? "\u6d88\u8017\u54c1\u8cbb\u3092\u7533\u8acb\u3059\u308b"
                  : hasVariant($state, "type", "convention")
                  ? "\u4f1a\u8b70\u8cbb\u3092\u7533\u8acb\u3059\u308b"
                  : hasVariant($state, "type", "travel")
                  ? "\u4ea4\u901a\u8cbb\u3092\u7533\u8acb\u3059\u308b"
                  : "\u7533\u8acb\u3059\u308b"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__iwsBu, {
                  [sty.freeBoxtype_convention__iwsBuUmVmc]: hasVariant(
                    $state,
                    "type",
                    "convention"
                  )
                })}
              >
                <DefaultButton
                  className={classNames(
                    "__wab_instance",
                    sty.defaultButton__jekSe
                  )}
                  color={"clear"}
                  link={`/create`}
                >
                  <LeftSvgrepoComsvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uLlEo
                    )}
                  >
                    {"\u79d1\u76ee\u9078\u629e\u306b\u623b\u308b"}
                  </div>
                </DefaultButton>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__oCm85, {
                  [sty.freeBoxconfirming__oCm85RyCqN]: hasVariant(
                    $state,
                    "confirming",
                    "confirming"
                  ),
                  [sty.freeBoxtype_convention__oCm85UmVmc]: hasVariant(
                    $state,
                    "type",
                    "convention"
                  )
                })}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form, {
                      [sty.formconfirming]: hasVariant(
                        $state,
                        "confirming",
                        "confirming"
                      ),
                      [sty.formtype_consumable]: hasVariant(
                        $state,
                        "type",
                        "consumable"
                      ),
                      [sty.formtype_convention]: hasVariant(
                        $state,
                        "type",
                        "convention"
                      ),
                      [sty.formtype_travel]: hasVariant(
                        $state,
                        "type",
                        "travel"
                      ),
                      [sty.formtype_travel_confirming]:
                        hasVariant($state, "type", "travel") &&
                        hasVariant($state, "confirming", "confirming")
                    }),
                    extendedOnValuesChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["graphqlMutation"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "AtiexzeE27KKVJrwX6s5c",
                                opId: "ab8ac747-63bd-4fc2-ad52-d8440eb7c81a",
                                userArgs: {
                                  variables: [
                                    $state.form.value.title,
                                    $state.form.value.issuedAt,
                                    $state.form.value.issuer,
                                    $state.form.value.issuerRegId,
                                    $state.form.value.description,
                                    $state.form.value.taxRate,
                                    $state.form.value.attachments,
                                    $state.form.value.amount
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              },
                              continueOnError: false
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["graphqlMutation"] != null &&
                        typeof $steps["graphqlMutation"] === "object" &&
                        typeof $steps["graphqlMutation"].then === "function"
                      ) {
                        $steps["graphqlMutation"] = await $steps[
                          "graphqlMutation"
                        ];
                      }

                      $steps["goToCreateComplete"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/create/complete`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToCreateComplete"] != null &&
                        typeof $steps["goToCreateComplete"] === "object" &&
                        typeof $steps["goToCreateComplete"].then === "function"
                      ) {
                        $steps["goToCreateComplete"] = await $steps[
                          "goToCreateComplete"
                        ];
                      }
                    },
                    onIsSubmittingChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    validateTrigger: ["onSubmit"],
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__afwq,
                          {
                            [sty.freeBoxconfirming__afwqRyCqN]: hasVariant(
                              $state,
                              "confirming",
                              "confirming"
                            ),
                            [sty.freeBoxtype_consumable__afwq9EEix]: hasVariant(
                              $state,
                              "type",
                              "consumable"
                            ),
                            [sty.freeBoxtype_travel_confirming__afwqQzfClRyCqN]:
                              hasVariant($state, "type", "travel") &&
                              hasVariant($state, "confirming", "confirming")
                          }
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___9Zyuv,
                            {
                              [sty.formFieldconfirming___9ZyuvryCqN]:
                                hasVariant($state, "confirming", "confirming"),
                              [sty.formFieldtype_travel_confirming___9ZyuvQzfClRyCqN]:
                                hasVariant($state, "type", "travel") &&
                                hasVariant($state, "confirming", "confirming")
                            }
                          )}
                          hidden={false}
                          label={"\u30bf\u30a4\u30c8\u30eb"}
                          name={"title"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "\u5165\u529b\u5fc5\u9808\u3067\u3059"
                            }
                          ]}
                          validateTrigger={["onSubmit"]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.titleInput
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["titleInput", "value"],
                                  AntdInput_Helpers
                                ),
                              placeholder:
                                "\u7d4c\u8cbb\u7533\u8acb\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u898b\u51fa\u3057\u3092\u4ed8\u3051\u3066\u8b58\u5225\u3057\u3084\u3059\u304f\u3057\u307e\u3057\u3087\u3046",
                              size: "middle",
                              value: p.generateStateValueProp($state, [
                                "titleInput",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "titleInput.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"titleInput"}
                                data-plasmic-override={overrides.titleInput}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__kWnH
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tvLa
                              )}
                            >
                              {"\u767a\u884c\u65e5"}
                            </div>
                          }
                          name={"issuedAt"}
                          rules={[{ ruleType: "required" }]}
                        >
                          {(() => {
                            const child$Props = {
                              bordered: true,
                              className: classNames(
                                "__wab_instance",
                                sty.dateInput
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["dateInput", "value"],
                                  AntdInput_Helpers
                                ),
                              size: "large",
                              type: "date",
                              value: p.generateStateValueProp($state, [
                                "dateInput",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "dateInput.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"dateInput"}
                                data-plasmic-override={overrides.dateInput}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v5UOm,
                            {
                              [sty.freeBoxtype_travel_confirming__v5UOmQzfClRyCqN]:
                                hasVariant($state, "type", "travel") &&
                                hasVariant($state, "confirming", "confirming")
                            }
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__foEhP,
                              {
                                [sty.formFieldtype_travel__foEhPQzfCl]:
                                  hasVariant($state, "type", "travel"),
                                [sty.formFieldtype_travel_confirming__foEhPQzfClRyCqN]:
                                  hasVariant($state, "type", "travel") &&
                                  hasVariant($state, "confirming", "confirming")
                              }
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dDoS
                                )}
                              >
                                {"\u767a\u884c\u8005"}
                              </div>
                            }
                            name={"issuer"}
                            rules={[{ ruleType: "required" }]}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.nameInput
                                ),
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["nameInput", "value"],
                                    AntdInput_Helpers
                                  ),
                                size: "middle",
                                value: p.generateStateValueProp($state, [
                                  "nameInput",
                                  "value"
                                ])
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "nameInput.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"nameInput"}
                                  data-plasmic-override={overrides.nameInput}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__qvlta,
                              {
                                [sty.formFieldtype_travel__qvltaQzfCl]:
                                  hasVariant($state, "type", "travel")
                              }
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xDf7M,
                                  {
                                    [sty.texttype_travel__xDf7MQzfCl]:
                                      hasVariant($state, "type", "travel")
                                  }
                                )}
                              >
                                {"\u767b\u9332\u756a\u53f7"}
                              </div>
                            }
                            name={"issuerRegId"}
                            validateTrigger={["onSubmit"]}
                          >
                            {(() => {
                              const child$Props = {
                                addonBefore: null,
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.numInput,
                                  {
                                    [sty.numInputconfirming]: hasVariant(
                                      $state,
                                      "confirming",
                                      "confirming"
                                    )
                                  }
                                ),
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["numInput", "value"],
                                    AntdInput_Helpers
                                  ),
                                placeholder:
                                  "\u30a4\u30f3\u30dc\u30a4\u30b9\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002",
                                size: "middle",
                                type: "text",
                                value: p.generateStateValueProp($state, [
                                  "numInput",
                                  "value"
                                ])
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "numInput.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"numInput"}
                                  data-plasmic-override={overrides.numInput}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__m7JA,
                            {
                              [sty.freeBoxtype_travel_confirming__m7JAQzfClRyCqN]:
                                hasVariant($state, "type", "travel") &&
                                hasVariant($state, "confirming", "confirming")
                            }
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__nr9Xg,
                              {
                                [sty.formFieldtype_travel__nr9XgQzfCl]:
                                  hasVariant($state, "type", "travel")
                              }
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ydw3N,
                                  {
                                    [sty.texttype_travel__ydw3NQzfCl]:
                                      hasVariant($state, "type", "travel")
                                  }
                                )}
                              >
                                {"\u91d1\u984d"}
                              </div>
                            }
                            name={"amount"}
                            rules={[{ ruleType: "required" }]}
                            validateTrigger={["onSubmit"]}
                          >
                            {(() => {
                              const child$Props = {
                                addonBefore: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cus2F
                                    )}
                                  >
                                    {"\uffe5"}
                                  </div>
                                ),
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.amountInput,
                                  {
                                    [sty.amountInputtype_travel]: hasVariant(
                                      $state,
                                      "type",
                                      "travel"
                                    )
                                  }
                                ),
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["amountInput", "value"],
                                    AntdInput_Helpers
                                  ),
                                placeholder: "\u7a0e\u8fbc\u91d1\u984d",
                                size: "large",
                                type: "number",
                                value: p.generateStateValueProp($state, [
                                  "amountInput",
                                  "value"
                                ])
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "amountInput.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"amountInput"}
                                  data-plasmic-override={overrides.amountInput}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___640Oq,
                              {
                                [sty.formFieldtype_travel___640OqQzfCl]:
                                  hasVariant($state, "type", "travel")
                              }
                            )}
                            initialValue={``}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lcE5X,
                                  {
                                    [sty.texttype_travel__lcE5XQzfCl]:
                                      hasVariant($state, "type", "travel")
                                  }
                                )}
                              >
                                {"\u7a0e\u533a\u5206"}
                              </div>
                            }
                            name={"taxRate"}
                            rules={[{ ruleType: "required" }]}
                          >
                            <AntdSelect
                              data-plasmic-name={"taxInput"}
                              data-plasmic-override={overrides.taxInput}
                              className={classNames(
                                "__wab_instance",
                                sty.taxInput
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              onChange={p.generateStateOnChangeProp($state, [
                                "taxInput",
                                "value"
                              ])}
                              options={(() => {
                                const __composite = [
                                  { type: null, label: null, value: null },
                                  { type: "option", value: null, label: null }
                                ];
                                __composite["0"]["type"] = "option";
                                __composite["0"]["label"] = "10%";
                                __composite["0"]["value"] = "ten";
                                __composite["1"]["value"] = "eight";
                                __composite["1"]["label"] = "8%";
                                return __composite;
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["taxInput__popup"]}
                              size={"large"}
                              value={p.generateStateValueProp($state, [
                                "taxInput",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                        </p.Stack>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__sJbIp,
                            {
                              [sty.formFieldtype_consumable__sJbIp9EEix]:
                                hasVariant($state, "type", "consumable")
                            }
                          )}
                          initialValue={""}
                          label={
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nvf9A
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zGYkN
                                )}
                              >
                                {"\u7d4c\u8cbb\u306e\u8a73\u7d30"}
                              </div>
                            </p.Stack>
                          }
                          name={"description"}
                          rules={[{ ruleType: "required" }]}
                          validateTrigger={["onSubmit"]}
                        >
                          {(() => {
                            const child$Props = {
                              containerClassName: classNames(
                                "__wab_instance",
                                sty.descriptionInput,
                                {
                                  [sty.descriptionInputtype_consumable]:
                                    hasVariant($state, "type", "consumable")
                                }
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["descriptionInput", "value"],
                                  Quill_Helpers
                                ),
                              placeholder:
                                "\u3053\u306e\u7d4c\u8cbb\u7533\u8acb\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002\u7279\u306b\u30015W1H\u3084\u72b6\u6cc1\u8aac\u660e\u3092\u8a18\u8ff0\u3059\u308b\u3068\u826f\u3044\u3067\u3059\u3002",
                              preserveWhitespace: true,
                              readOnly: false,
                              toolbar: (() => {
                                const __composite = {
                                  textStyle: [
                                    "bold",
                                    "italic",
                                    "underline",
                                    "strikethrough"
                                  ],
                                  colors: ["text color", "text background"],
                                  script: true,
                                  fontFamily: true,
                                  heading: [
                                    "Heading 1",
                                    "Heading 2",
                                    "Heading 3",
                                    "Heading 4",
                                    "Heading 5",
                                    "Heading 6",
                                    "Body"
                                  ],
                                  fontSizes: [
                                    "small",
                                    "medium",
                                    "large",
                                    "huge"
                                  ],
                                  formatting: [
                                    "alignment",
                                    "list",
                                    "indentation",
                                    "text direction",
                                    "clear formatting"
                                  ],
                                  inputTypes: null
                                };
                                __composite["inputTypes"] = [
                                  "link",
                                  "blockquote",
                                  "code-block"
                                ];
                                return __composite;
                              })(),
                              value: p.generateStateValueProp($state, [
                                "descriptionInput",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "descriptionInput.value"
                                }
                              ],
                              [],
                              Quill_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <Quill
                                data-plasmic-name={"descriptionInput"}
                                data-plasmic-override={
                                  overrides.descriptionInput
                                }
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uQw2H
                          )}
                        >
                          <Copilot
                            data-plasmic-name={"copilot"}
                            data-plasmic-override={overrides.copilot}
                            className={classNames(
                              "__wab_instance",
                              sty.copilot
                            )}
                            onGenerate={async result => {
                              const $steps = {};

                              $steps["runActionOnForm"] = true
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "form",
                                      action: "setFieldValue",
                                      args: [["description"], result]
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runActionOnForm"] != null &&
                                typeof $steps["runActionOnForm"] === "object" &&
                                typeof $steps["runActionOnForm"].then ===
                                  "function"
                              ) {
                                $steps["runActionOnForm"] = await $steps[
                                  "runActionOnForm"
                                ];
                              }
                            }}
                            systemPrompt={(() => {
                              try {
                                return $state.form.value.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            whatToGen={"\u7d4c\u8cbb\u306e\u8a73\u7d30"}
                          />
                        </div>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___0RQro,
                            {
                              [sty.formFieldtype_consumable___0RQro9EEix]:
                                hasVariant($state, "type", "consumable"),
                              [sty.formFieldtype_convention___0RQroUmVmc]:
                                hasVariant($state, "type", "convention")
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ez1Ry
                              )}
                            >
                              {"\u9818\u53ce\u66f8\u3092\u6dfb\u4ed8"}
                            </div>
                          }
                          name={"attachments"}
                          preserve={true}
                          rules={[{ ruleType: "required" }]}
                          validateTrigger={["onSubmit"]}
                        >
                          <UploadWrapper
                            data-plasmic-name={"attachments"}
                            data-plasmic-override={overrides.attachments}
                            accept={""}
                            className={classNames(
                              "__wab_instance",
                              sty.attachments,
                              {
                                [sty.attachmentstype_convention]: hasVariant(
                                  $state,
                                  "type",
                                  "convention"
                                )
                              }
                            )}
                            dragAndDropFiles={true}
                            files={p.generateStateValueProp($state, [
                              "attachments",
                              "files"
                            ])}
                            listType={"picture-card"}
                            maxCount={4}
                            multiple={true}
                            onFilesChange={p.generateStateOnChangeProp($state, [
                              "attachments",
                              "files"
                            ])}
                            showUploadList={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__r2Z8W
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fWwg
                                )}
                              >
                                {
                                  "\u30c9\u30e9\u30c3\u30b0\u30fb\u30a2\u30f3\u30c9\u30fb\u30c9\u30ed\u30c3\u30d7 \u307e\u305f\u306f"
                                }
                              </div>
                              <AntdButton
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button,
                                  {
                                    [sty.buttontype_convention]: hasVariant(
                                      $state,
                                      "type",
                                      "convention"
                                    )
                                  }
                                )}
                                size={"large"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bCvvZ
                                  )}
                                >
                                  {
                                    "\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9"
                                  }
                                </div>
                              </AntdButton>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6UZoA
                                )}
                              >
                                {
                                  "\u5bfe\u5fdc\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f: JPEG, PDF"
                                }
                              </div>
                            </div>
                          </UploadWrapper>
                        </FormItemWrapper>
                        <DefaultButton
                          className={classNames(
                            "__wab_instance",
                            sty.defaultButton__aJb5O,
                            {
                              [sty.defaultButtontype_consumable__aJb5O9EEix]:
                                hasVariant($state, "type", "consumable")
                            }
                          )}
                          color={"primaryLt"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runActionOnForm"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "form",
                                    action: "validateFields"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnForm"] != null &&
                              typeof $steps["runActionOnForm"] === "object" &&
                              typeof $steps["runActionOnForm"].then ===
                                "function"
                            ) {
                              $steps["runActionOnForm"] = await $steps[
                                "runActionOnForm"
                              ];
                            }

                            $steps["updateConfirming"] =
                              !$steps.runActionOnForm.errorFields ||
                              $steps.runActionOnForm.errorFields.length === 0
                                ? (() => {
                                    const actionArgs = {
                                      vgroup: "confirming",
                                      operation: 4
                                    };
                                    return (({ vgroup, value }) => {
                                      if (typeof value === "string") {
                                        value = [value];
                                      }

                                      p.set($state, vgroup, true);
                                      return true;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateConfirming"] != null &&
                              typeof $steps["updateConfirming"] === "object" &&
                              typeof $steps["updateConfirming"].then ===
                                "function"
                            ) {
                              $steps["updateConfirming"] = await $steps[
                                "updateConfirming"
                              ];
                            }
                          }}
                          submitsForm={false}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y1KlN
                            )}
                          >
                            {"\u6b21\u3078"}
                          </div>
                        </DefaultButton>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___73ZCq,
                          {
                            [sty.freeBoxconfirming___73ZCqryCqN]: hasVariant(
                              $state,
                              "confirming",
                              "confirming"
                            ),
                            [sty.freeBoxtype_consumable___73ZCq9EEix]:
                              hasVariant($state, "type", "consumable"),
                            [sty.freeBoxtype_convention___73ZCqUmVmc]:
                              hasVariant($state, "type", "convention"),
                            [sty.freeBoxtype_travel_confirming___73ZCqQzfClRyCqN]:
                              hasVariant($state, "type", "travel") &&
                              hasVariant($state, "confirming", "confirming")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ehNHd,
                            {
                              [sty.textconfirming__ehNHdryCqN]: hasVariant(
                                $state,
                                "confirming",
                                "confirming"
                              ),
                              [sty.texttype_consumable__ehNHd9EEix]: hasVariant(
                                $state,
                                "type",
                                "consumable"
                              )
                            }
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {
                                "\u5165\u529b\u3057\u305f\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <KvItem
                          className={classNames(
                            "__wab_instance",
                            sty.kvItem__tqvPl,
                            {
                              [sty.kvItemtype_consumable__tqvPl9EEix]:
                                hasVariant($state, "type", "consumable")
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rxOin
                              )}
                            >
                              {"\u30bf\u30a4\u30c8\u30eb"}
                            </div>
                          }
                          noCopy={true}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.form.value.title || "未記入";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u672a\u8a18\u5165";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </KvItem>
                        <KvItem
                          className={classNames(
                            "__wab_instance",
                            sty.kvItem__wWAzg,
                            {
                              [sty.kvItemtype_consumable__wWAzg9EEix]:
                                hasVariant($state, "type", "consumable")
                            }
                          )}
                          label={"\u767a\u884c\u65e5"}
                          noCopy={true}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.form.value.issuedAt || "未記入";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </KvItem>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cOtAn
                          )}
                        >
                          <KvItem
                            className={classNames(
                              "__wab_instance",
                              sty.kvItem__s5Tm,
                              {
                                [sty.kvItemconfirming__s5TmRyCqN]: hasVariant(
                                  $state,
                                  "confirming",
                                  "confirming"
                                )
                              }
                            )}
                            label={"\u767a\u884c\u8005"}
                            noCopy={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t0JI
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.form.value.issuer || "未記入";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u4e0a\u69d8";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </KvItem>
                          <KvItem
                            className={classNames(
                              "__wab_instance",
                              sty.kvItem___5WDVd,
                              {
                                [sty.kvItemconfirming___5WDVdryCqN]: hasVariant(
                                  $state,
                                  "confirming",
                                  "confirming"
                                )
                              }
                            )}
                            label={"\u767b\u9332\u756a\u53f7"}
                            noCopy={true}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.form.value.issuerRegId || "未記入"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u672a\u8a18\u5165";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </KvItem>
                        </p.Stack>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zpx4S
                          )}
                        >
                          <KvItem
                            className={classNames(
                              "__wab_instance",
                              sty.kvItem__pVzU3
                            )}
                            label={"\u91d1\u984d"}
                            noCopy={true}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sJv5Y
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gkvyj
                                )}
                              >
                                {"\uffe5"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cr4Xt
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.form.value.amount || "未記入"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </p.Stack>
                          </KvItem>
                          <KvItem
                            className={classNames(
                              "__wab_instance",
                              sty.kvItem__t5JiM
                            )}
                            label={"\u7a0e\u533a\u5206"}
                            noCopy={true}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7VWNa
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j7Twz
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.form.value.taxRate ===
                                        "eight"
                                        ? 8
                                        : $state.form.value.taxRate === "ten"
                                        ? 10
                                        : "未選択";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ud9CW
                                )}
                              >
                                {"%"}
                              </div>
                            </p.Stack>
                          </KvItem>
                        </div>
                        <KvItem
                          className={classNames(
                            "__wab_instance",
                            sty.kvItem__pZckQ
                          )}
                          label={"\u9818\u53ce\u66f8\u679a\u6570"}
                          noCopy={true}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iuUa
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jJiq
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.form.value.attachments.length;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u6dfb\u4ed8\u306a\u3057";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5VodB
                              )}
                            >
                              {"\u679a"}
                            </div>
                          </p.Stack>
                        </KvItem>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oosZ3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pkBJu
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (
                                      $state.form.value.description || null
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u8aac\u660e\u672a\u8a18\u5165";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </div>
                        </div>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__risKx
                          )}
                        >
                          <DefaultButton
                            className={classNames(
                              "__wab_instance",
                              sty.defaultButton__onvA,
                              {
                                [sty.defaultButtontype_consumable__onvA9EEix]:
                                  hasVariant($state, "type", "consumable")
                              }
                            )}
                            color={"clear"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateConfirming"] = true
                                ? (() => {
                                    const actionArgs = {
                                      vgroup: "confirming",
                                      operation: 6
                                    };
                                    return (({ vgroup, value }) => {
                                      if (typeof value === "string") {
                                        value = [value];
                                      }

                                      p.set($state, vgroup, false);
                                      return false;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateConfirming"] != null &&
                                typeof $steps["updateConfirming"] ===
                                  "object" &&
                                typeof $steps["updateConfirming"].then ===
                                  "function"
                              ) {
                                $steps["updateConfirming"] = await $steps[
                                  "updateConfirming"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xfPj5
                              )}
                            >
                              {"\u4fee\u6b63\u3059\u308b"}
                            </div>
                          </DefaultButton>
                          <DefaultButton
                            className={classNames(
                              "__wab_instance",
                              sty.defaultButton__jh0O,
                              {
                                [sty.defaultButtontype_consumable__jh0O9EEix]:
                                  hasVariant($state, "type", "consumable")
                              }
                            )}
                            color={"primary"}
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wtEve
                              )}
                            >
                              {"\u78ba\u5b9a"}
                            </div>
                          </DefaultButton>
                        </p.Stack>
                      </p.Stack>
                    </FormWrapper>
                  );
                })()}
              </div>
            </section>
          </LayoutBase>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "layoutBase",
    "createStep",
    "section",
    "svg",
    "form",
    "titleInput",
    "dateInput",
    "nameInput",
    "numInput",
    "amountInput",
    "taxInput",
    "descriptionInput",
    "copilot",
    "attachments",
    "button"
  ],
  layoutBase: [
    "layoutBase",
    "createStep",
    "section",
    "svg",
    "form",
    "titleInput",
    "dateInput",
    "nameInput",
    "numInput",
    "amountInput",
    "taxInput",
    "descriptionInput",
    "copilot",
    "attachments",
    "button"
  ],
  createStep: ["createStep"],
  section: [
    "section",
    "svg",
    "form",
    "titleInput",
    "dateInput",
    "nameInput",
    "numInput",
    "amountInput",
    "taxInput",
    "descriptionInput",
    "copilot",
    "attachments",
    "button"
  ],
  svg: ["svg"],
  form: [
    "form",
    "titleInput",
    "dateInput",
    "nameInput",
    "numInput",
    "amountInput",
    "taxInput",
    "descriptionInput",
    "copilot",
    "attachments",
    "button"
  ],
  titleInput: ["titleInput"],
  dateInput: ["dateInput"],
  nameInput: ["nameInput"],
  numInput: ["numInput"],
  amountInput: ["amountInput"],
  taxInput: ["taxInput"],
  descriptionInput: ["descriptionInput"],
  copilot: ["copilot"],
  attachments: ["attachments", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layoutBase: typeof LayoutBase;
  createStep: typeof CreateStep;
  section: "section";
  svg: "svg";
  form: typeof FormWrapper;
  titleInput: typeof AntdInput;
  dateInput: typeof AntdInput;
  nameInput: typeof AntdInput;
  numInput: typeof AntdInput;
  amountInput: typeof AntdInput;
  taxInput: typeof AntdSelect;
  descriptionInput: typeof Quill;
  copilot: typeof Copilot;
  attachments: typeof UploadWrapper;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCreateDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCreateDetail__VariantsArgs;
    args?: PlasmicCreateDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCreateDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCreateDetail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCreateDetail__ArgProps,
          internalVariantPropNames: PlasmicCreateDetail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCreateDetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCreateDetail";
  } else {
    func.displayName = `PlasmicCreateDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicCreateDetail = Object.assign(
  // Top-level PlasmicCreateDetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layoutBase: makeNodeComponent("layoutBase"),
    createStep: makeNodeComponent("createStep"),
    section: makeNodeComponent("section"),
    svg: makeNodeComponent("svg"),
    form: makeNodeComponent("form"),
    titleInput: makeNodeComponent("titleInput"),
    dateInput: makeNodeComponent("dateInput"),
    nameInput: makeNodeComponent("nameInput"),
    numInput: makeNodeComponent("numInput"),
    amountInput: makeNodeComponent("amountInput"),
    taxInput: makeNodeComponent("taxInput"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    copilot: makeNodeComponent("copilot"),
    attachments: makeNodeComponent("attachments"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCreateDetail
    internalVariantProps: PlasmicCreateDetail__VariantProps,
    internalArgProps: PlasmicCreateDetail__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCreateDetail;
/* prettier-ignore-end */
