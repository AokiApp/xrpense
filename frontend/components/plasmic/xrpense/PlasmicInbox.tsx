// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: HUySnaEnfX2W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InboxItem from "../../InboxItem"; // plasmic-import: p5qPJGRp9-20/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicInbox.module.css"; // plasmic-import: HUySnaEnfX2W/css

createPlasmicElementProxy;

export type PlasmicInbox__VariantMembers = {
  minimized: "minimized";
};
export type PlasmicInbox__VariantsArgs = {
  minimized?: SingleBooleanChoiceArg<"minimized">;
};
type VariantPropType = keyof PlasmicInbox__VariantsArgs;
export const PlasmicInbox__VariantProps = new Array<VariantPropType>(
  "minimized"
);

export type PlasmicInbox__ArgsType = {};
type ArgPropType = keyof PlasmicInbox__ArgsType;
export const PlasmicInbox__ArgProps = new Array<ArgPropType>();

export type PlasmicInbox__OverridesType = {
  root?: p.Flex<"div">;
  inboxItem?: p.Flex<typeof InboxItem>;
};

export interface DefaultInboxProps {
  minimized?: SingleBooleanChoiceArg<"minimized">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInbox__RenderFunc(props: {
  variants: PlasmicInbox__VariantsArgs;
  args: PlasmicInbox__ArgsType;
  overrides: PlasmicInbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "minimized",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.minimized
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "AtiexzeE27KKVJrwX6s5c",
        opId: "f7ac0ef5-250e-4f64-b249-9ef57b239356",
        userArgs: {},
        cacheKey: `plasmic.$.f7ac0ef5-250e-4f64-b249-9ef57b239356.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootminimized]: hasVariant($state, "minimized", "minimized") }
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $queries.query.data.response.data.inbox.map(item => {
              const { title, children, type, updated_at, unread, id } = item;
              const formattedDate = new Date(updated_at).toLocaleString();
              return {
                title,
                children,
                type,
                updated_at: formattedDate,
                unread,
                id
              };
            });
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <InboxItem
            data-plasmic-name={"inboxItem"}
            data-plasmic-override={overrides.inboxItem}
            className={classNames("__wab_instance", sty.inboxItem, {
              [sty.inboxItemminimized]: hasVariant(
                $state,
                "minimized",
                "minimized"
              )
            })}
            key={currentIndex}
            messageId={(() => {
              try {
                return currentItem.messageId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            title={
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u30c7\u30fc\u30bf\u66f4\u65b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
            type={(() => {
              try {
                return currentItem.type;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "_default";
                }
                throw e;
              }
            })()}
            unixtime={(() => {
              try {
                return currentItem.unixtime;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 3323232434;
                }
                throw e;
              }
            })()}
            unread={(() => {
              try {
                return currentItem.unread;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            updateAt={
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.updated_at;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u9593\u304c\u5165\u308a\u307e\u3059";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
          >
            <React.Fragment>
              {(() => {
                try {
                  return currentItem.children;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Lorem Ipsum \u306e\u66f4\u65b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </InboxItem>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "inboxItem"],
  inboxItem: ["inboxItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  inboxItem: typeof InboxItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInbox__VariantsArgs;
    args?: PlasmicInbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInbox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInbox__ArgProps,
          internalVariantPropNames: PlasmicInbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInbox";
  } else {
    func.displayName = `PlasmicInbox.${nodeName}`;
  }
  return func;
}

export const PlasmicInbox = Object.assign(
  // Top-level PlasmicInbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    inboxItem: makeNodeComponent("inboxItem"),

    // Metadata about props expected for PlasmicInbox
    internalVariantProps: PlasmicInbox__VariantProps,
    internalArgProps: PlasmicInbox__ArgProps
  }
);

export default PlasmicInbox;
/* prettier-ignore-end */
