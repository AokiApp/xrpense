// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: Haxw2MIMlmpq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconButton from "../../IconButton"; // plasmic-import: c6xa4h_PpvrO/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicKvItem.module.css"; // plasmic-import: Haxw2MIMlmpq/css

import CopySvgrepoComsvgIcon from "./icons/PlasmicIcon__CopySvgrepoComsvg"; // plasmic-import: GHJGyw-ZCuIE/icon

createPlasmicElementProxy;

export type PlasmicKvItem__VariantMembers = {
  noCopy: "noCopy";
};
export type PlasmicKvItem__VariantsArgs = {
  noCopy?: SingleBooleanChoiceArg<"noCopy">;
};
type VariantPropType = keyof PlasmicKvItem__VariantsArgs;
export const PlasmicKvItem__VariantProps = new Array<VariantPropType>("noCopy");

export type PlasmicKvItem__ArgsType = {
  label?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicKvItem__ArgsType;
export const PlasmicKvItem__ArgProps = new Array<ArgPropType>(
  "label",
  "children"
);

export type PlasmicKvItem__OverridesType = {
  root?: p.Flex<"div">;
  copy?: p.Flex<typeof IconButton>;
  svg?: p.Flex<"svg">;
};

export interface DefaultKvItemProps {
  label?: React.ReactNode;
  children?: React.ReactNode;
  noCopy?: SingleBooleanChoiceArg<"noCopy">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicKvItem__RenderFunc(props: {
  variants: PlasmicKvItem__VariantsArgs;
  args: PlasmicKvItem__ArgsType;
  overrides: PlasmicKvItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noCopy",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noCopy
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootnoCopy]: hasVariant($state, "noCopy", "noCopy") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uqdEj)}>
        <div className={classNames(projectcss.all, sty.freeBox__cCukY)}>
          {p.renderPlasmicSlot({
            defaultContents: "\u30ad\u30fc\u540d",
            value: args.label,
            className: classNames(sty.slotTargetLabel, {
              [sty.slotTargetLabelnoCopy]: hasVariant(
                $state,
                "noCopy",
                "noCopy"
              )
            })
          })}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___6Uva5)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__cqSY, {
            [sty.freeBoxnoCopy__cqSYz1Rql]: hasVariant(
              $state,
              "noCopy",
              "noCopy"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uIxk9)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c\u30d0\u30ea\u30e5\u30fc\u540d\u304c",
              value: args.children
            })}
          </div>
          {(hasVariant($state, "noCopy", "noCopy") ? false : true) ? (
            <IconButton
              data-plasmic-name={"copy"}
              data-plasmic-override={overrides.copy}
              className={classNames("__wab_instance", sty.copy, {
                [sty.copynoCopy]: hasVariant($state, "noCopy", "noCopy")
              })}
            >
              <CopySvgrepoComsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </IconButton>
          ) : null}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "copy", "svg"],
  copy: ["copy", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  copy: typeof IconButton;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicKvItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicKvItem__VariantsArgs;
    args?: PlasmicKvItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicKvItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicKvItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicKvItem__ArgProps,
          internalVariantPropNames: PlasmicKvItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicKvItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicKvItem";
  } else {
    func.displayName = `PlasmicKvItem.${nodeName}`;
  }
  return func;
}

export const PlasmicKvItem = Object.assign(
  // Top-level PlasmicKvItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copy: makeNodeComponent("copy"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicKvItem
    internalVariantProps: PlasmicKvItem__VariantProps,
    internalArgProps: PlasmicKvItem__ArgProps
  }
);

export default PlasmicKvItem;
/* prettier-ignore-end */
