// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: FUfSA5MG9HFF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Layout from "../../Layout"; // plasmic-import: 8kcWfTTW5pIG/component
import DecoratedSection from "../../DecoratedSection"; // plasmic-import: TLGCmAakJkGm/component
import IconButton from "../../IconButton"; // plasmic-import: c6xa4h_PpvrO/component
import Inbox from "../../Inbox"; // plasmic-import: HUySnaEnfX2W/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import DefaultButton from "../../DefaultButton"; // plasmic-import: IXlVEWy595ii/component

import { UserTypeValue, useUserType } from "./PlasmicGlobalVariant__UserType"; // plasmic-import: 4ybx8vV_5sw-/globalVariant
import { useScreenVariants as useScreenVariantsvAp4RmrZq8S } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vAp4rmrZq-8s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: FUfSA5MG9HFF/css

import OpenExternalSvgrepoComsvgIcon from "./icons/PlasmicIcon__OpenExternalSvgrepoComsvg"; // plasmic-import: r2Sk3XCc6h2H/icon
import ArrowRightSvgrepoComsvgIcon from "./icons/PlasmicIcon__ArrowRightSvgrepoComsvg"; // plasmic-import: xi0Zh_7t7laJ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: UPP2br5JFIoC/icon
import TrainSvgrepoComsvg2Icon from "./icons/PlasmicIcon__TrainSvgrepoComsvg2"; // plasmic-import: mSFFK6OjZB9P/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tOAoYivXP3sa/icon
import ConferenceSvgrepoComsvg2Icon from "./icons/PlasmicIcon__ConferenceSvgrepoComsvg2"; // plasmic-import: bTnZBV_IQOlG/icon
import OfficeSuppliesSvgrepoComsvg2Icon from "./icons/PlasmicIcon__OfficeSuppliesSvgrepoComsvg2"; // plasmic-import: rUhtQG20PlwQ/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  layout?: p.Flex<typeof Layout>;
  inbox?: p.Flex<typeof Inbox>;
  popover?: p.Flex<typeof AntdPopover>;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    userType: useUserType(),
    screen: useScreenVariantsvAp4RmrZq8S()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_userType_anonymous]: hasVariant(
                globalVariants,
                "userType",
                "anonymous"
              )
            }
          )}
        >
          <Layout
            data-plasmic-name={"layout"}
            data-plasmic-override={overrides.layout}
            className={classNames("__wab_instance", sty.layout, {
              [sty.layoutglobal_userType_anonymous]: hasVariant(
                globalVariants,
                "userType",
                "anonymous"
              )
            })}
            title={"\u30db\u30fc\u30e0"}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hi5Yp, {
                    [sty.freeBoxglobal_userType_anonymous__hi5YpYeBsZ]:
                      hasVariant(globalVariants, "userType", "anonymous")
                  })}
                >
                  <DecoratedSection
                    className={classNames(
                      "__wab_instance",
                      sty.decoratedSection___5J3JK,
                      {
                        [sty.decoratedSectionglobal_userType_anonymous___5J3JKYeBsZ]:
                          hasVariant(globalVariants, "userType", "anonymous")
                      }
                    )}
                    noTitle={true}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__yyCGa
                      )}
                      component={Link}
                      href={`/signin`}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eBcfN
                        )}
                      >
                        {
                          "\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u7d4c\u8cbb\u306e\u7533\u8acb\u3092\u304a\u3053\u306a\u3046"
                        }
                      </div>
                      <ArrowRightSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__mSad)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  </DecoratedSection>
                  <DecoratedSection
                    actions={
                      <IconButton
                        className={classNames(
                          "__wab_instance",
                          sty.iconButton__bvlpr
                        )}
                        to={`/inbox`}
                      />
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.decoratedSection__r8Lak,
                      {
                        [sty.decoratedSectionglobal_userType_anonymous__r8LakYeBsZ]:
                          hasVariant(globalVariants, "userType", "anonymous")
                      }
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kVfwZ)}
                    >
                      <Inbox
                        data-plasmic-name={"inbox"}
                        data-plasmic-override={overrides.inbox}
                        className={classNames("__wab_instance", sty.inbox)}
                        minimized={true}
                      />
                    </div>
                  </DecoratedSection>
                  <DecoratedSection
                    actions={
                      <IconButton
                        className={classNames(
                          "__wab_instance",
                          sty.iconButton__kBlyO
                        )}
                        to={`/create`}
                      />
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.decoratedSection___7Vkgr,
                      {
                        [sty.decoratedSectionglobal_userType_anonymous___7VkgrYeBsZ]:
                          hasVariant(globalVariants, "userType", "anonymous")
                      }
                    )}
                    title={
                      "\u65b0\u305f\u306b\u7d4c\u8cbb\u3092\u7533\u8acb\u3059\u308b"
                    }
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rQsRi)}
                    >
                      <AntdPopover
                        data-plasmic-name={"popover"}
                        data-plasmic-override={overrides.popover}
                        arrow={true}
                        className={classNames("__wab_instance", sty.popover)}
                        content={null}
                        contentText={"Popover contents"}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        mouseEnterDelay={0}
                        mouseLeaveDelay={0}
                        onOpenChange={p.generateStateOnChangeProp($state, [
                          "popover",
                          "open"
                        ])}
                        open={p.generateStateValueProp($state, [
                          "popover",
                          "open"
                        ])}
                        popoverScopeClassName={sty["popover__popover"]}
                        title={null}
                      >
                        <DefaultButton
                          className={classNames(
                            "__wab_instance",
                            sty.defaultButton__owXcw
                          )}
                          color={"clear"}
                          corner={true}
                          link={"/create/detail?type=travel"}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eL6Jz
                            )}
                          >
                            <TrainSvgrepoComsvg2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zZ8AB
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Uv2M
                              )}
                            >
                              {
                                "\u4ea4\u901a\u8cbb\u3092\u7533\u8acb\u3057\u307e\u3059"
                              }
                            </div>
                          </p.Stack>
                        </DefaultButton>
                      </AntdPopover>
                      <DefaultButton
                        className={classNames(
                          "__wab_instance",
                          sty.defaultButton__r5T7C
                        )}
                        color={"clear"}
                        corner={true}
                        link={"/create/detail?type=convention"}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hqDNc
                          )}
                        >
                          <ConferenceSvgrepoComsvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__itaB4
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lJCkN
                            )}
                          >
                            {
                              "\u4f1a\u8b70\u8cbb\u3092\u7533\u8acb\u3057\u307e\u3059"
                            }
                          </div>
                        </p.Stack>
                      </DefaultButton>
                      <DefaultButton
                        className={classNames(
                          "__wab_instance",
                          sty.defaultButton__fm61I
                        )}
                        color={"clear"}
                        corner={true}
                        link={"/create/detail?type=consumable"}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ojHya
                          )}
                        >
                          <OfficeSuppliesSvgrepoComsvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__md6HO
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xjFjo
                            )}
                          >
                            {
                              "\u6d88\u8017\u54c1\u8cbb\u3092\u7533\u8acb\u3057\u307e\u3059"
                            }
                          </div>
                        </p.Stack>
                      </DefaultButton>
                    </p.Stack>
                  </DecoratedSection>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pq0U, {
                      [sty.freeBoxglobal_userType_anonymous__pq0UYeBsZ]:
                        hasVariant(globalVariants, "userType", "anonymous")
                    })}
                  >
                    <DecoratedSection
                      className={classNames(
                        "__wab_instance",
                        sty.decoratedSection__xIpN
                      )}
                      noTitle={true}
                    >
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___8VSpn
                        )}
                        component={Link}
                        href={`/history`}
                        platform={"nextjs"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cwSf)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"96px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/xrpense/images/historyLogManuscriptSvgrepoComsvg.svg",
                            fullWidth: 150,
                            fullHeight: 150,
                            aspectRatio: 1
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iLFp
                          )}
                        >
                          {
                            "\u904e\u53bb\u306b\u7533\u8acb\u3057\u305f\u7d4c\u8cbb\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059"
                          }
                        </div>
                      </p.Stack>
                    </DecoratedSection>
                    <DecoratedSection
                      className={classNames(
                        "__wab_instance",
                        sty.decoratedSection__lCkwS
                      )}
                      noTitle={true}
                    >
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__vStzT
                        )}
                        component={Link}
                        href={`/customer`}
                        platform={"nextjs"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__pnoms)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"96px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/xrpense/images/informationChatRightSvgrepoComsvg.svg",
                            fullWidth: 150,
                            fullHeight: 150,
                            aspectRatio: 1
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nPUoe
                          )}
                        >
                          {
                            "\u304a\u5ba2\u69d8\u60c5\u5831\u306e\u78ba\u8a8d\n\u632f\u8fbc\u30a2\u30c9\u30ec\u30b9\u5909\u66f4\u304c\u3067\u304d\u307e\u3059"
                          }
                        </div>
                      </p.Stack>
                    </DecoratedSection>
                  </p.Stack>
                  <DecoratedSection
                    className={classNames(
                      "__wab_instance",
                      sty.decoratedSection__gc0Jv,
                      {
                        [sty.decoratedSectionglobal_userType_anonymous__gc0JvYeBsZ]:
                          hasVariant(globalVariants, "userType", "anonymous")
                      }
                    )}
                    noTitle={true}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__mcDsV
                      )}
                      component={Link}
                      href={`/signout`}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hqf6S
                        )}
                      >
                        {"\u30b5\u30a4\u30f3\u30a2\u30a6\u30c8"}
                      </div>
                    </p.PlasmicLink>
                  </DecoratedSection>
                </p.Stack>
              )}
            </ph.DataCtxReader>
          </Layout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "layout", "inbox", "popover"],
  layout: ["layout", "inbox", "popover"],
  inbox: ["inbox"],
  popover: ["popover"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  layout: typeof Layout;
  inbox: typeof Inbox;
  popover: typeof AntdPopover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layout: makeNodeComponent("layout"),
    inbox: makeNodeComponent("inbox"),
    popover: makeNodeComponent("popover"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ホーム",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
