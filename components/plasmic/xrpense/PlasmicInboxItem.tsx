// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: p5qPJGRp9-20

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicInboxItem.module.css"; // plasmic-import: p5qPJGRp9-20/css

import CompleteIcon from "./icons/PlasmicIcon__Complete"; // plasmic-import: pTJFuCWk8NGr/icon
import ThreedotsSvgrepoComsvgIcon from "./icons/PlasmicIcon__ThreedotsSvgrepoComsvg"; // plasmic-import: wN9HcmYrq_HW/icon
import Error16SvgrepoComsvgIcon from "./icons/PlasmicIcon__Error16SvgrepoComsvg"; // plasmic-import: dD3ugMsUg3e6/icon
import HandShakeSvgrepoComsvgIcon from "./icons/PlasmicIcon__HandShakeSvgrepoComsvg"; // plasmic-import: uL_WO8lUTM0O/icon

createPlasmicElementProxy;

export type PlasmicInboxItem__VariantMembers = {
  type: "_default" | "wait" | "error" | "focus";
  unread: "unread";
};
export type PlasmicInboxItem__VariantsArgs = {
  type?: MultiChoiceArg<"_default" | "wait" | "error" | "focus">;
  unread?: SingleBooleanChoiceArg<"unread">;
};
type VariantPropType = keyof PlasmicInboxItem__VariantsArgs;
export const PlasmicInboxItem__VariantProps = new Array<VariantPropType>(
  "type",
  "unread"
);

export type PlasmicInboxItem__ArgsType = {
  unixtime?: number;
  title?: React.ReactNode;
  children?: React.ReactNode;
  messageId?: string;
  updateAt?: React.ReactNode;
};
type ArgPropType = keyof PlasmicInboxItem__ArgsType;
export const PlasmicInboxItem__ArgProps = new Array<ArgPropType>(
  "unixtime",
  "title",
  "children",
  "messageId",
  "updateAt"
);

export type PlasmicInboxItem__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultInboxItemProps {
  unixtime?: number;
  title?: React.ReactNode;
  children?: React.ReactNode;
  messageId?: string;
  updateAt?: React.ReactNode;
  type?: MultiChoiceArg<"_default" | "wait" | "error" | "focus">;
  unread?: SingleBooleanChoiceArg<"unread">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInboxItem__RenderFunc(props: {
  variants: PlasmicInboxItem__VariantsArgs;
  args: PlasmicInboxItem__ArgsType;
  overrides: PlasmicInboxItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          unixtime: 10000000
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "unread",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unread
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "AtiexzeE27KKVJrwX6s5c",
        opId: "985e3288-b72f-4fa8-b7df-012597adae53",
        userArgs: {},
        cacheKey: `plasmic.$.985e3288-b72f-4fa8-b7df-012597adae53.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.roottype__default]: hasVariant($state, "type", "_default"),
          [sty.roottype_error]: hasVariant($state, "type", "error"),
          [sty.roottype_focus]: hasVariant($state, "type", "focus"),
          [sty.roottype_wait]: hasVariant($state, "type", "wait"),
          [sty.rootunread]: hasVariant($state, "unread", "unread")
        }
      )}
      component={Link}
      href={`/inbox/${(() => {
        try {
          return $props.messageId;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}`}
      onClick={async event => {
        const $steps = {};
      }}
      platform={"nextjs"}
    >
      <p.PlasmicIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "type", "focus")
            ? HandShakeSvgrepoComsvgIcon
            : hasVariant($state, "type", "error")
            ? Error16SvgrepoComsvgIcon
            : hasVariant($state, "type", "wait")
            ? ThreedotsSvgrepoComsvgIcon
            : CompleteIcon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgtype_error]: hasVariant($state, "type", "error"),
          [sty.svgtype_focus]: hasVariant($state, "type", "focus"),
          [sty.svgtype_wait]: hasVariant($state, "type", "wait"),
          [sty.svgunread]: hasVariant($state, "unread", "unread")
        })}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zoUhf)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qlXLi)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cuXd6, {
              [sty.freeBoxunread__cuXd6QMjEr]: hasVariant(
                $state,
                "unread",
                "unread"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "\u30c7\u30fc\u30bf\u66f4\u65b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f",
              value: args.title,
              className: classNames(sty.slotTargetTitle, {
                [sty.slotTargetTitleunread]: hasVariant(
                  $state,
                  "unread",
                  "unread"
                )
              })
            })}
            {p.renderPlasmicSlot({
              defaultContents:
                "\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u9593\u304c\u5165\u308a\u307e\u3059",
              value: args.updateAt,
              className: classNames(sty.slotTargetUpdateAt, {
                [sty.slotTargetUpdateAtunread]: hasVariant(
                  $state,
                  "unread",
                  "unread"
                )
              })
            })}
          </p.Stack>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox___4EzJx)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Lorem Ipsum \u306e\u66f4\u65b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInboxItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInboxItem__VariantsArgs;
    args?: PlasmicInboxItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInboxItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInboxItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInboxItem__ArgProps,
          internalVariantPropNames: PlasmicInboxItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInboxItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInboxItem";
  } else {
    func.displayName = `PlasmicInboxItem.${nodeName}`;
  }
  return func;
}

export const PlasmicInboxItem = Object.assign(
  // Top-level PlasmicInboxItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicInboxItem
    internalVariantProps: PlasmicInboxItem__VariantProps,
    internalArgProps: PlasmicInboxItem__ArgProps
  }
);

export default PlasmicInboxItem;
/* prettier-ignore-end */
