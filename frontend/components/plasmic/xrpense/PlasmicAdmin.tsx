// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4QmempJ4uAWNpTRouKWPHf
// Component: _9grt9g2AsF0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: IXlVEWy595ii/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_xrpense.module.css"; // plasmic-import: 4QmempJ4uAWNpTRouKWPHf/projectcss
import sty from "./PlasmicAdmin.module.css"; // plasmic-import: _9grt9g2AsF0/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: UPP2br5JFIoC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tOAoYivXP3sa/icon

createPlasmicElementProxy;

export type PlasmicAdmin__VariantMembers = {};
export type PlasmicAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdmin__VariantsArgs;
export const PlasmicAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicAdmin__ArgsType;
export const PlasmicAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicAdmin__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdmin__RenderFunc(props: {
  variants: PlasmicAdmin__VariantsArgs;
  args: PlasmicAdmin__ArgsType;
  overrides: PlasmicAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Button
            className={classNames("__wab_instance", sty.button__wke4J)}
            onClick={async event => {
              const $steps = {};

              $steps["useIntegration"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "sjUPu6wiiyaWS7QoMvsbJW",
                        opId: "b219af67-6a6b-49cd-8bd2-357fc1f44a85",
                        userArgs: {
                          variables: [
                            prompt("ownerEmail"),
                            prompt("ownerEmployeeCode"),
                            prompt("orgName"),
                            prompt("ownerName")
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["useIntegration"] != null &&
                typeof $steps["useIntegration"] === "object" &&
                typeof $steps["useIntegration"].then === "function"
              ) {
                $steps["useIntegration"] = await $steps["useIntegration"];
              }
            }}
          >
            {"Initiate Org"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___5O8)}
            onClick={async event => {
              const $steps = {};

              $steps["graphqlMutation"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "sjUPu6wiiyaWS7QoMvsbJW",
                        opId: "f9453de4-91ab-44a1-82bd-8df634fac4b2",
                        userArgs: {
                          variables: [
                            prompt("type"),
                            prompt("children"),
                            prompt("title")
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      },
                      continueOnError: false
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["graphqlMutation"] != null &&
                typeof $steps["graphqlMutation"] === "object" &&
                typeof $steps["graphqlMutation"].then === "function"
              ) {
                $steps["graphqlMutation"] = await $steps["graphqlMutation"];
              }
            }}
          >
            {"Insert Inbox"}
          </Button>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdmin__VariantsArgs;
    args?: PlasmicAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdmin__ArgProps,
          internalVariantPropNames: PlasmicAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdmin";
  } else {
    func.displayName = `PlasmicAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAdmin = Object.assign(
  // Top-level PlasmicAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicAdmin
    internalVariantProps: PlasmicAdmin__VariantProps,
    internalArgProps: PlasmicAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdmin;
/* prettier-ignore-end */
